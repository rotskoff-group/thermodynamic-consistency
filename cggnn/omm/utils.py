from operator import is_
import mdtraj as md
import numpy as np
import torch
"""Chignolin information is based on chignolin_implicit/chignolin.pdb
   which is used in the dataset https://github.com/coarse-graining/cgnet/issues/191"""


chignolin_masses = [[12.01078,
                     1.007947,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     15.99943,
                     12.01078,
                     15.99943,
                     14.00672,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     15.99943,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     15.99943,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     15.99943,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     12.01078,
                     1.007947,
                     14.00672,
                     1.007947,
                     12.01078,
                     12.01078,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     12.01078,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     1.007947,
                     12.01078,
                     15.99943,
                     14.00672,
                     1.007947,
                     12.01078,
                     1.007947,
                     1.007947,
                     1.007947]]
chignolin_atomic_numbers = [6,
                            1,
                            1,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            1,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            1,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            8,
                            8,
                            6,
                            8,
                            7,
                            6,
                            1,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            1,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            1,
                            1,
                            6,
                            8,
                            8,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            8,
                            1,
                            6,
                            1,
                            1,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            8,
                            1,
                            6,
                            1,
                            1,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            6,
                            1,
                            7,
                            1,
                            6,
                            6,
                            6,
                            1,
                            6,
                            1,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            6,
                            1,
                            1,
                            6,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            1,
                            6,
                            1,
                            6,
                            1,
                            6,
                            8,
                            7,
                            1,
                            6,
                            1,
                            1,
                            1]
chignolin_bond_edge_index = [[0,   1],
                             [0,   2],
                             [0,   3],
                             [0,   4],
                             [4,   5],
                             [4,   6],
                             [6,   7],
                             [6,   8],
                             [8,   9],
                             [8,  10],
                             [8,  25],
                             [10,  11],
                             [10,  12],
                             [10,  13],
                             [13,  14],
                             [13,  21],
                             [14,  15],
                             [14,  16],
                             [16,  17],
                             [16,  18],
                             [18,  19],
                             [18,  23],
                             [19,  20],
                             [21,  22],
                             [21,  23],
                             [23,  24],
                             [25,  26],
                             [25,  27],
                             [27,  28],
                             [27,  29],
                             [29,  30],
                             [29,  31],
                             [29,  46],
                             [31,  32],
                             [31,  33],
                             [31,  34],
                             [34,  35],
                             [34,  42],
                             [35,  36],
                             [35,  37],
                             [37,  38],
                             [37,  39],
                             [39,  40],
                             [39,  44],
                             [40,  41],
                             [42,  43],
                             [42,  44],
                             [44,  45],
                             [46,  47],
                             [46,  48],
                             [48,  49],
                             [48,  50],
                             [50,  51],
                             [50,  52],
                             [50,  58],
                             [52,  53],
                             [52,  54],
                             [52,  55],
                             [55,  56],
                             [55,  57],
                             [58,  59],
                             [58,  60],
                             [60,  61],
                             [60,  64],
                             [61,  62],
                             [61,  63],
                             [61,  69],
                             [64,  65],
                             [64,  66],
                             [64,  72],
                             [66,  67],
                             [66,  68],
                             [66,  69],
                             [69,  70],
                             [69,  71],
                             [72,  73],
                             [72,  74],
                             [74,  75],
                             [74,  76],
                             [76,  77],
                             [76,  78],
                             [76,  87],
                             [78,  79],
                             [78,  80],
                             [78,  81],
                             [81,  82],
                             [81,  83],
                             [81,  84],
                             [84,  85],
                             [84,  86],
                             [87,  88],
                             [87,  89],
                             [89,  90],
                             [89,  91],
                             [91,  92],
                             [91,  93],
                             [91, 101],
                             [93,  94],
                             [93,  95],
                             [93,  97],
                             [95,  96],
                             [97,  98],
                             [97,  99],
                             [97, 100],
                             [101, 102],
                             [101, 103],
                             [103, 104],
                             [103, 105],
                             [105, 106],
                             [105, 107],
                             [105, 108],
                             [108, 109],
                             [108, 110],
                             [110, 111],
                             [110, 112],
                             [112, 113],
                             [112, 114],
                             [112, 122],
                             [114, 115],
                             [114, 116],
                             [114, 118],
                             [116, 117],
                             [118, 119],
                             [118, 120],
                             [118, 121],
                             [122, 123],
                             [122, 124],
                             [124, 125],
                             [124, 126],
                             [126, 127],
                             [126, 128],
                             [126, 146],
                             [128, 129],
                             [128, 130],
                             [128, 131],
                             [131, 132],
                             [131, 137],
                             [132, 133],
                             [132, 134],
                             [134, 135],
                             [134, 136],
                             [136, 137],
                             [136, 142],
                             [137, 138],
                             [138, 139],
                             [138, 140],
                             [140, 141],
                             [140, 144],
                             [142, 143],
                             [142, 144],
                             [144, 145],
                             [146, 147],
                             [146, 148],
                             [148, 149],
                             [148, 150],
                             [150, 151],
                             [150, 152],
                             [150, 167],
                             [152, 153],
                             [152, 154],
                             [152, 155],
                             [155, 156],
                             [155, 163],
                             [156, 157],
                             [156, 158],
                             [158, 159],
                             [158, 160],
                             [160, 161],
                             [160, 165],
                             [161, 162],
                             [163, 164],
                             [163, 165],
                             [165, 166],
                             [167, 168],
                             [167, 169],
                             [169, 170],
                             [169, 171],
                             [171, 172],
                             [171, 173],
                             [171, 174]]
chignolin_full_backbone_original_indices = [6, 8, 27, 29, 48, 50, 60,
                                            64, 74, 76, 89, 91, 103,
                                            105, 110, 112, 124, 126,
                                            148, 150]
chignolin_r_indices = [6, 8, 25, 26, 27, 29, 46, 47, 48, 50, 58, 59, 60, 64, 72,
                       73, 74, 76, 87, 88, 89, 91, 101, 102, 103, 105, 108, 109, 110, 112,
                       122, 123, 124, 126, 146, 147, 148, 150, 167, 168]
chignolin_backbone_original_indices = [6, 8, 25, 27, 29, 46, 48, 50, 58, 60, 64, 72, 74, 76, 87, 89, 91, 101, 103, 105, 108, 110, 112, 122, 124, 126, 146, 148, 150, 167]

            


chignolin_atom_names = ['CAY', 'HY1', 'HY2', 'HY3', 'CY', 'OY', 'N', 'H', 'CA', 'HA', 'CB',
                        'HB3', 'HB2', 'CG', 'CD1', 'HD1', 'CE1', 'HE1', 'CZ', 'OH', 'HH', 'CD2', 'HD2', 'CE2', 'HE2',
                        'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB3', 'HB2', 'CG', 'CD1', 'HD1', 'CE1', 'HE1', 'CZ',
                        'OH', 'HH', 'CD2', 'HD2', 'CE2', 'HE2', 'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB3', 'HB2', 'CG',
                        'OD1', 'OD2', 'C', 'O', 'N', 'CD', 'HD3', 'HD2', 'CA', 'HA', 'CB', 'HB3', 'HB2', 'CG', 'HG3', 'HG2',
                        'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB3', 'HB2', 'CG', 'HG3', 'HG2', 'CD', 'OE1', 'OE2',
                        'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB', 'OG1', 'HG1',
                        'CG2', 'HG21', 'HG22', 'HG23', 'C', 'O', 'N', 'H', 'CA', 'HA3',
                        'HA2', 'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB', 'OG1', 'HG1', 'CG2',
                        'HG21', 'HG22', 'HG23', 'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB3', 'HB2',
                        'CG', 'CD1', 'HD1', 'NE1', 'HE1', 'CE2', 'CD2', 'CE3', 'HE3', 'CZ3', 'HZ3',
                        'CZ2', 'HZ2', 'CH2', 'HH2', 'C', 'O', 'N', 'H', 'CA', 'HA', 'CB', 'HB3', 'HB2',
                        'CG', 'CD1', 'HD1', 'CE1', 'HE1', 'CZ', 'OH', 'HH', 'CD2', 'HD2', 'CE2', 'HE2',
                        'C', 'O', 'NT', 'HNT', 'CAT', 'H', 'H2', 'H3']

adp_masses = [[1.0079,
              12.0108,
              1.0079,
              1.0079,
              12.0108,
              15.9994,
              14.0067,
              1.0079,
              12.0108,
              1.0079,
              12.0108,
              1.0079,
              1.0079,
              1.0079,
              12.0108,
              15.9994,
              14.0067,
              1.0079,
              12.0108,
              1.0079,
              1.0079,
              1.0079]]
adp_atomic_numbers = [1, 6, 1, 1, 6, 8, 7, 1,
                      6, 1, 6, 1, 1, 1, 6, 8, 7, 1, 6, 1, 1, 1]
adp_bond_edge_index = [[1,  4],
                       [4,  5],
                       [0,  1],
                       [1,  2],
                       [1,  3],
                       [4,  6],
                       [8, 14],
                       [14, 15],
                       [8, 10],
                       [8,  9],
                       [6,  8],
                       [10, 11],
                       [10, 12],
                       [10, 13],
                       [6,  7],
                       [14, 16],
                       [18, 19],
                       [18, 20],
                       [18, 21],
                       [16, 18],
                       [16, 17]]
adp_r_indices = [1, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18]
adp_backbone_original_indices = [4, 6, 8, 14, 16]
adp_atom_names = ["1HH3", "CH3", "2HH3", "3HH3", "C", "O", "N", "H",
                  "CA", "HA", "CB", "HB1", "HB2", "HB3", "C", "O", "N",
                  "H", "CH3", "1HH3", "2HH3", "3HH3"]


class ProteinInfo:
    def __init__(self, protein_name):
        if protein_name == "chignolin":
            self.masses = chignolin_masses
            self.atomic_numbers = chignolin_atomic_numbers
            self.bond_edge_index = chignolin_bond_edge_index
            self.backbone_original_indices = chignolin_backbone_original_indices
            self.full_backbone_original_indices = chignolin_full_backbone_original_indices
            self.r_indices = chignolin_r_indices
            self.atom_names = chignolin_atom_names
            self.num_atoms = 175
            self.get_reaction_coordinates = self.get_chignolin_reaction_coordinates
            self.rc1 = "TICA_2"
            self.rc2 = "TICA_1"
            self.xlim = 5
            self.pe_xlim = 600
            self.num_relax_steps = 75

        elif protein_name == "adp":
            self.masses = adp_masses
            self.atomic_numbers = adp_atomic_numbers
            self.bond_edge_index = adp_bond_edge_index
            self.backbone_original_indices = adp_backbone_original_indices
            self.full_backbone_original_indices = adp_backbone_original_indices
            self.r_indices = adp_r_indices
            self.atom_names = adp_atom_names
            self.num_atoms = 22
            self.get_reaction_coordinates = self.get_adp_reaction_coordinates
            self.rc1 = "Phi"
            self.rc2 = "Psi"
            self.xlim = np.pi
            self.pe_xlim = 200
            self.num_relax_steps = 2

        else:
            raise ValueError("Incorrect Protein Supplied")

    def get_adp_reaction_coordinates(self, r_coordinates, is_linear_r=True):
        """Computes phi/psi angles of alanine dipeptide
        Arguments:
            r_coordinates: A numpy array of shape (batch_size, len(adp_r_indices), 3) or (batch_size, 22, 3) for which to compute dihedrals
            is_linear_r: A bool specifiying whether shape of r_coordinates. True if shape is (batch_size, len(adp_r_indices), 3) False if batch_size, 22, 3)
        Returns:
            traj_angles: A numpy array of shape (batch_size, 2) representing the computed phi and psi angles
        """
        pp_indices_r = {}
        for i in [4, 6, 8, 14, 16]:
            if is_linear_r:
                pp_indices_r[i] = self.r_indices.index(i)
            else:
                pp_indices_r[i] = i
        psi_indices_r = [pp_indices_r[6], pp_indices_r[8],
                         pp_indices_r[14], pp_indices_r[16]]
        phi_indices_r = [pp_indices_r[4], pp_indices_r[6],
                         pp_indices_r[8], pp_indices_r[14]]
        traj = md.Trajectory(r_coordinates, topology=None)
        traj_angles = md.compute_dihedrals(traj,
                                           [phi_indices_r, psi_indices_r])
        return traj_angles

    def get_chignolin_reaction_coordinates(self, r_coordinates,
                                           box_lengths, mean, eigenvectors,
                                           is_linear_r = True, device="cuda:0"):
        """Computes tIC1 and tIC2 of chignolin
        Arguments:
            r_coordinates: A numpy array of shape (batch_size, len(chignolin_r_indices), 3) or (batch_size, 175, 3) for which to compute tICs
            box_lengths: A torch tensor of shape (1, 1, 1, 3) representing the box_lengths of the system
            mean: A numpy array of shape (45, ) representing the "tica_mean"
            eigenvectors: A numpy array of shape (45, 4) representing the projection matrix onto 4 leading tICs
            is_linear_r: A bool specifiying whether shape of r_coordinates. True if shape is (batch_size, len(chignolin_r_indices), 3) False if batch_size, 175, 3)
            device: A PyTorch device specifying on what device to carry out the calculation
        Returns:
            traj_angles: A numpy array of shape (batch_size, 2) representing the computed tIC1 and tIC2
        """
        ca_indices_r = []
        for i in [8,  29,  50,  64,  76,  91, 105, 112, 126, 150]:
            if is_linear_r:
                ca_indices_r.append(self.r_indices.index(i))
            else:
                ca_indices_r.append(i)
        all_positions_ca_r = r_coordinates[:, ca_indices_r]
        num_examples = all_positions_ca_r.shape[0]
        batch_size = 10000
        num_batches = (num_examples + batch_size - 1) // batch_size
        all_distances = []
        for batch_num in range(num_batches):
            batch_positions = torch.tensor(
                all_positions_ca_r[batch_num * batch_size:(batch_num + 1) * batch_size]).float().to(device)/10
            displacements = batch_positions.unsqueeze(
                -2) - batch_positions.unsqueeze(-3)
            to_subtract = ((torch.abs(displacements) > 0.5 * box_lengths)
                           * torch.sign(displacements) * box_lengths)
            displacements -= to_subtract
            distances = torch.linalg.norm(displacements, axis=-1)
            upper_triu_indices = torch.triu_indices(10, 10, offset=1)
            distances = distances[:, upper_triu_indices[0],
                                  upper_triu_indices[1]]
            all_distances.append(distances)
        all_distances = torch.cat(all_distances)
        all_distances = all_distances.cpu().numpy()
        all_projections_sub = ((all_distances - mean)  @ eigenvectors)[:, :2]
        return all_projections_sub
